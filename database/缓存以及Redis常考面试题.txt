缓存以及Redis面试常考题


一、什么是缓存？为什么要使用缓存？
1. 缓存可以缓解关系型数据库并发访问的压力，可以将热点数据放置在缓存中，以减少对数据库的访问。
2. 由于缓存存放于内存之中（内存IO替代磁盘IO），所以可以减少响应时间。
3. 提升吞吐量，Redis等内存数据库单机就可以支撑很大并发。官方给出的数据是55万QPS。


二、各种操作耗时对比
打开一个网站，几秒
在数据库中查询一条记录（有索引），十几毫秒
机械磁盘一次寻址定位，4毫秒
从机械磁盘顺序读取1MB数据，2毫秒
从SSD磁盘顺序读取1MB数据，0.3毫秒
从远程分布式缓存Redis读取一个数据，0.5毫秒
从内存中读取1MB数据，十几微秒
Java程序本地方法调用，几微秒
网络传输2KB数据，1微秒


三、常用缓存数据库Redis和Memcached的主要区别？
Redis：
    类型：1.支持内存 2.非关系型数据库
    数据存储类型：1.String 2.List 3.Set 4.Hash 5.Sort Set（也叫ZSet）
    查询操作类型：1.批量操作 2.事务支持（伪事务） 3.每个类型不同的CRUD
    附加功能：1.发布/订阅模式 2.主从分区 3.序列化支持 4.脚本支持（LUA脚本）
    网络IO模型：1.单进程模式（IO多路复用）
    事件库：自封装简易事件库AeEvent
    持久化支持：1.RDB 2.AOF

Memached：
    类型：1.支持内存 2.key-value键值对形式 3.缓存系统
    数据存储类型：1.文本型 2.二进制类型
    查询操作类型：1.CRUD 2.少量的其他命令
    附加功能：1.多线程服务支持
    网络IO模型：1.多线程、非阻塞IO模式
    事件库：贵族血统的LibEvent事件库
    持久化支持：不支持


四、请简述Redis常用数据类型和使用场景？
String（字符串）：用来实现简单的KV键值对存储，比如计数器
List（链表）：实现双向链表，比如用户的关注，粉丝列表
Hash（哈希表）：用来存储彼此相关信息的键值对
Set（集合）：存储不重复元素，比如用户的关注者
Sorted Set（有序集合）：实时信息排行榜


五、Redis有哪些持久化方式？
Redis支持两种方式实现持久化，可以通过修改Redis配置来选择持久化的方式。

1. 快照方式：
    每隔一段时间，就把数据快照放在磁盘二进制文件中，dump.rdb
    用这个rdb文件可以恢复Redis的状态。
    这个方式有个明显的缺点，当快照间隔的时间范围内发生了宕机时，会丢失部分数据。
2. AOF（Append Only File）：
    每个写命令追加到appendonly.aof中。
    优势是宕机时不会丢失数据，但是缺点是aof文件会很大，所以恢复速度慢。


六、什么是Redis事务？
Redis事务指的是，将多个请求打包，一次性、按顺序执行多个命令的机制，在此期间Redis不会执行其他客户的请求。
Redis通过MULTI, EXEC, WATCH等命令实现事务功能。

python中有个redis-py库，通过pipeline = conn.pipeline(transaction=True)来实现事务功能。


七、Redis如何实现分布式锁？
面对场景：不同机器、不同进程之间进行状态同步。
原理：当一个线程（进程）持有锁时，其他线程需要等待。
具体操作：获取锁时，向redis中写入一个kv键值对，当释放锁时，再删除刚刚写入的kv键值对。
    其他线程在获取锁时会判断，此kv键值对是否存在，如果不存在，表示可以获取锁。
    如果存在，线程需要重试，或者等待。


八、使用缓存的模式？
Cache Aside：同时更新缓存和数据库
Read/Write Through：先更新缓存，缓存负责同步更新数据库
Write Behind Caching：先更新缓存，缓存定期异步更新数据库

实际场景中：
如果使用先更新缓存的方式，可能会引起缓存和数据库的不一致，导致读取到脏数据。
一般会先更新数据库，然后删除缓存，等待下次访问缓存数据时，从数据库中加载数据（Cache Aside）。


九、什么是缓存穿透，如何解决缓存穿透问题？
缓存穿透：
    大量查询不到的数据的请求落到后端数据库，数据库压力增大。

解决：
    1. 对于没查到的就返回None，并将数据缓存
    2. 插入数据的时候删除相应缓存，或者设置较短的超时时间


十、什么是缓存击穿，如何解决缓存击穿的问题？
缓存击穿：
    某些非常热点的数据key过期，大量请求打到后端数据库

解决：
    1. 分布式锁，获取锁的线程从数据库拉数据更新缓存，其他线程等待。
    2. 异步后台更新，通过后台的定时任务，针对快过期的key自动刷新。


十一、什么是缓存雪崩，如何解决缓存雪崩？
缓存雪崩：
    缓存不可用或者大量缓存key同时失效，大量请求直接打到数据库

解决：
    1. 多级缓存：不同级别的key设置不同的超时时间
    2. 随机超时：key的超时时间随机设置，防止同时超时
    3. 提升系统的可用性，通过监控、报警来完善系统。














