Mysql优化考题


一、什么是索引？为什么需要索引？
索引是数据表中一个或多个列进行排序的数据结构。
索引能够大幅度提升检索速度。


二、查找结构进化史？
注意：效率依次提升。

1. 线性查找：一个一个的找，实现简单，但是效率太低
2. 二分查找：对一个排好序的序列进行查找，每次都判断是不是在某一半中。但是要求有序，且插入性能低。
3. HASH：优点是查询快，但是占用空间大，不适合存储大规模数据。
4. 二叉查找树：BST（Binary Search Tree）插入和查询都很快，效率可达到log(n)，不适合存储大规模数据，而且会出现复杂度退化（单边增长）。
如何退化？当按递增顺序插入时，复杂度会变成线性查找。
5. 平衡二叉树：AVL-Tree（Balanced binary search trees），解决BST复杂度退化的问题，但是当节点非常多的时候，书高很高，查询变慢。
如何解决的？每次插入后，进行一次平衡。
6. 多路查找树：B-Tree，为了解决平衡二叉树的树高问题，允许一个父节点拥有多个子节点。


二、什么是B-Tree？什么是B+Tree？
B-Tree:
    多路平衡查找树，每个节点最多m（m>=2）个子节点，称为m阶或者m度
    叶节点具有相同的深度，并且叶节点中的数据key从左到右是递增的

B+Tree：
    Mysql实际使用的B+Tree作为索引的数据结构。
    和B-Tree不同的是，B+Tree只在叶子节点带有指向记录的指针，因为子节点不记录数据会减少存储空间，用来存储更多数据，并增加树的度。
