Mysql优化考题


一、什么是索引？为什么需要索引？
索引是数据表中一个或多个列进行排序的数据结构。
索引能够大幅度提升检索速度。


二、查找结构进化史？
注意：效率依次提升。

1. 线性查找：一个一个的找，实现简单，但是效率太低
2. 二分查找：对一个排好序的序列进行查找，每次都判断是不是在某一半中。但是要求有序，且插入性能低。
3. HASH：优点是查询快，但是占用空间大，不适合存储大规模数据。
4. 二叉查找树：BST（Binary Search Tree）插入和查询都很快，效率可达到log(n)，不适合存储大规模数据，而且会出现复杂度退化（单边增长）。
如何退化？当按递增顺序插入时，复杂度会变成线性查找。
5. 平衡二叉树：AVL-Tree（Balanced binary search trees），解决BST复杂度退化的问题，但是当节点非常多的时候，书高很高，查询变慢。
如何解决的？每次插入后，进行一次平衡。
6. 多路查找树：B-Tree，为了解决平衡二叉树的树高问题，允许一个父节点拥有多个子节点。


三、什么是B-Tree？什么是B+Tree？
B-Tree:
    多路平衡查找树，每个节点最多m（m>=2）个子节点，称为m阶或者m度
    叶节点具有相同的深度，并且叶节点中的数据key从左到右是递增的

B+Tree：
    Mysql实际使用的B+Tree作为索引的数据结构。
    和B-Tree不同的是，B+Tree只在叶子节点带有指向记录的指针，因为子节点不记录数据会减少存储空间，用来存储更多数据，并增加树的度。
    而且B+Tree可以更好的实现范围查询（比如大于某个字段）。


四、Mysql索引的类型有哪些？
    普通索引：CREATE INDEX
    唯一索引：索引列的值必须唯一，CREATE UNIQUE INDEX
    多列索引：使用多个列创建索引，
    主键索引（Primary Key）：一个表只能有一个。
    全文索引（Fulltext Index）：但InnoDB引擎不支持。


五、什么时候创建索引？
1. 经常用作查询条件的字段（WHERE条件）
2. 经常用作表连接的字段
3. 经常出现在Order By 和 Group By 后的字段


六、创建索引有哪些需要注意的（最佳实践）？
1. 非空字段NOT NULL，Mysql很难对空值作查询优化，所以索引字段需要有默认值。
2. 索引的值应该区分度高、离散度大，作为索引的字段值尽量不要有大量相同值。
3. 索引的长度不要太长，比较索引值的时候耗费时间。


七、索引什么时候失效？
注意：根本原因是B+Tree的key无法直接比较。

1. 模糊匹配，以%开头的LIKE语句
2. 类型隐转，注意SQL中是否有参数类型和要查询的列类型不匹配的情况，比如用字符串格式的时间查询列类型为Datetime的列（在Python这种动态语言中要更为注意）
3. 最左前缀。


八、解释一下聚集索引（聚簇索引）和非聚集索引（非聚簇索引）？
所谓的"聚集"指的是，B+Tree叶子节点寸的是指针还是数据记录。
MyISAM索引和数据分离，使用的是非聚集索引。
而InnoDB数据文件就是索引文件，主键索引就是聚集索引。


九、如何排查慢查询？
慢查询通常是缺少索引，或者索引不合理，或者业务代码导致的。
1. slow_query_log_file开启并且查询慢查询日志
2. 通过explain排查索引问题
3. 调整数据修改索引，业务代码层限制不合理访问。比如一次返回太多数据，再比如数据类型不匹配导致了全表扫描
